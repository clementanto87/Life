1. Inner Class -> Outer.Inner ObjectOfInner = new Outer().new Inner();
2. Static inner Class -> Outer.Inner ObjectOfInner = new Outer.Inner();
3. Method local inner class -> Can be called only inside the method
4. Anon inner class -> Implementation to the interface

	InnerClass ObjectOfInner = new InnerClass(){
			public void print{
				//print some value here
			}
	};

5. Nested interface

	public class Test implements first.second {

}

interface first {

	interface second {

	}
}




    -> The scope of a nested class is bounded by the scope of its enclosing class. Thus in above example, class NestedClass does not exist independently of class OuterClass.
    -> A nested class has access to the members, including private members, of the class in which it is nested. However, reverse is not true i.e. the enclosing class does not have access to the members of the nested class.
    -> A nested class is also a member of its enclosing class.
    -> As a member of its enclosing class, a nested class can be declared private, public, protected, or package private(default).
    -> Nested classes are divided into two categories:
        static nested class : Nested classes that are declared static are called static nested classes.
        inner class : An inner class is a non-static nested class.
