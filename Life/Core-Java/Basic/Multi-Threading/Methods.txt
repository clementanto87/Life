Methods:

1. Sleep 
2. join 
3. Yield
4. interupt


1. Sleep: Static method of the thread class
		Thread will sleep for the milli-second.

2. join(): Not a static method
		Sequencial execuation of the thread: thread which has join method will run till it completes the task then next thread run's

	public class TestApp extends Thread {

	static int i = 0;

	public static void main(String[] args) {
		Thread t1 = new Thread(TestApp::controller);
		Thread t2 = new Thread(TestApp::controller);

		t1.start();
		try {
			t1.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		t2.start();

	}

	public static void controller() {

		try {
			// Thread.sleep(5000);
			for (int j = 0; j < 10; j++)
				System.out.println("print" + ++i);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}	


3. Yield -> pause the thread for short time | if no other thread is avaiable it will run
4. Thread.MAX_PRIORITY -> t2.setPriority(Thread.MAX_PRIORITY); -> high priority thread will execute first
5. DemoneThread (helper Thread): It helps the user defined thread.
		t1.setDaemon(true);
6. getId(); -> Thread.currentThread().getId()
7. getCurrentThread(); ->  Thread.currentThread().getName()